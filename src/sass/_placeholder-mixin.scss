/*
	@param $width (px, em, percentage, null)
	@param $height (px, em, percentage, null)
	@param $ratio (decimal) height to width ratio, ie: 0.5 would correspond to a ratio of height: 0.5, width: 1, or 250px to 500px
	@options $options (map) The following options can be specified:
		use-ratio-height: The height can be forced to be calculated as a ratio, given that the units are the same as the width


	Provide one of the following sets of parameters to create a placefolder:
		width and height
		width and ratio
		height and ratio
		ratio
*/
@mixin placeholder($width: null, $height: null, $ratio: null, $options: (use-ratio-height: null)) {

	$use-ratio-height: map-get($options, 'use-ratio-height');

	$width: force-unknown-units-to-px($width);
	$height: force-unknown-units-to-px($height);

	// If a forced setting wasn't specified on the $options map, then we will determine if we should use a ratio-based height
	@if ($use-ratio-height == null) {
		@if (($height != null and unit($height) == '%') or ($ratio != null)) {
			$use-ratio-height: true;
		}
		@else {
			$use-ratio-height: false;
		}
	}

	@if (
		($width == null and $height == null and $ratio == null)
		or ($width == null and $ratio == null)
		or ($height == null and $ratio == null)
	) {
		@warn "Not enough parameters specified. Ensure that either both a width and height are specified,
		or, a width or a height is specified along with the ratio, or just a ratio";
	}

	@if ($use-ratio-height) {

		@if ($width != null and $height != null) {
			$ratio: get-height-to-width-ratio($height, $width);
		}

		@if ($height != null) {
			@warn "Specified $height parameter will not be used as the height will be dynamically set with :after padding-top by the ratio";
		}

		@if ($ratio != null) {

			@if ($width != null) {
				width: $width;
			}

			&:after {
				content: '';
				display: inline-block;
				padding-top: percentage($ratio);
				width: 0;
			}
		}
		// Could not come up with a valid ratio
		@else {
			@error "Use a percentage height or equal units to calculate a ratio";
		}
	}
	@else {
		width: $width;
		height: $height;
	}
}

/*
	@param $width  Width of the placeholder
	@param $height  Height of the placeholder

	Quick little calculation to determine the height to width ratio
*/
@function get-height-to-width-ratio($height, $width) {

	@if (unit($height) == '%') {
		@return ($height/100%);
	}
	@elseif (do-units-match($height, $width)) {
		@return ($height / $width);		
	}
	@else {
		@return false;
	}
}

/*
	@param $unit1 (css unit)
	@param $unit2 (css unit)

	Returns true if the units match, ie 25px and 50px, and false if they don't.
*/
@function do-units-match($unit1, $unit2) {
	@return (unit($unit1) == unit($unit2));
}

/*
	@param unit

	Helper function to ensure that a unit is specified. If a number is provided and no units, px wil be forced
*/
@function force-unknown-units-to-px($unit, $force-unit: 'px') {

	@if ($unit == null) {
		@return null;
	}
	@elseif (unit($unit) != null and unit($unit) != "") {
		@return $unit;
	}
	@elseif ($unit != null) {
		// Return the units as pixels
		@return $unit + $force-unit;
	}
	@else {
		@return null;
	}
}